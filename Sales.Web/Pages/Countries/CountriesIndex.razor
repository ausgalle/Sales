@page "/countries"

@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService swal
@attribute [Authorize(Roles = "Admin")]


<div class="card">
	<div class="card-header">
		<span>
			<i class="oi oi-globe"></i> Países
			<a class="btn btn-sm btn-primary float-end" @onclick=@(() => ShowModal())><i class="oi oi-plus"></i> Adicionar País</a>
		</span>
	</div>
	<div class="card-body">
		<div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
			<div>
				<input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar país..." @bind-value="Filter" />
			</div>
			<div class="mx-1">
				<button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync"><i class="oi oi-layers" /> Filtrar</button>
				<button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync"><i class="oi oi-ban" /> Limpiar</button>
			</div>
		</div>


		<GenericList Mylist="Countries">
			<Body>
				<table class="table table-striped">
					<thead>
						<tr>
							<th>País</th>
							<th style="width:220px">Estados / Departamentos</th>
							<th style="width:260px"></th>
						</tr>
					</thead>
					<tbody>
						@foreach (var country in Countries!)
						{
							<tr>
								<td>
									@country.Name
								</td>
								<td>
									@country.StatesNumber
								</td>
								<td>
									<a href="/countries/details/@country.Id"  class="btn btn-info btn-sm"><i class="oi oi-list"/> Detalles</a>
									<a @onclick=@(() => ShowModal(country.Id, true)) class="btn btn-warning btn-sm"><i class="oi oi-pencil" /> Editar</a>
									<button class="btn btn-danger btn-sm" @onclick=@(() => Delete(country))><i class="oi oi-trash" /> Borrar</button>
								</td>
							</tr>
						}
					</tbody>
				</table>
			</Body>
		</GenericList>
	</div>
</div>
<Pagination CurrentPage="currentPage"
			TotalPages="totalPages"
			SelectedPage="SelectedPageAsync" />


@code {
	public List<Country>? Countries { get; set; }
	private int currentPage = 1;
	private int totalPages;

	[CascadingParameter]
	IModalService Modal { get; set; } = default!;


	[Parameter]
	[SupplyParameterFromQuery]
	public string Page { get; set; } = "";

	[Parameter]
	[SupplyParameterFromQuery]
	public string Filter { get; set; } = "";



	protected override async Task OnInitializedAsync()
	{
		await LoadAsync();
	}

	private async Task ShowModal(int id = 0, bool isEdit = false)
	{
		IModalReference modalReference;

		if (isEdit)
		{
			modalReference = Modal.Show<CountryEdit>(string.Empty, new ModalParameters().Add("Id", id));
		}
		else
		{
			modalReference = Modal.Show<CountryCreate>();
		}

		var result = await modalReference.Result;
		if (result.Confirmed)
		{
			await LoadAsync();
		}
	}


	private async Task SelectedPageAsync(int page)
	{
		currentPage = page;
		await LoadAsync(page);
	}

	private async Task LoadAsync(int page = 1)
	{
		if (!string.IsNullOrWhiteSpace(Page))
		{
			page = Convert.ToInt32(Page);
		}

		string url1 = string.Empty;
		string url2 = string.Empty;

		if (string.IsNullOrEmpty(Filter))
		{
			url1 = $"/api/countries?page={page}";
			url2 = $"/api/countries/totalPages";
		}
		else
		{
			url1 = $"/api/countries?page={page}&filter={Filter}";
			url2 = $"/api/countries/totalPages?filter={Filter}";
		}

		try
		{
			var responseHppt = await repository.Get<List<Country>>(url1);
			var responseHppt2 = await repository.Get<int>(url2);
			Countries = responseHppt.Response!;
			totalPages = responseHppt2.Response!;
		}
		catch (Exception ex)
		{
			await swal.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
		}

	}


	private async Task Delete(Country country)
	{
		var result = await swal.FireAsync(new SweetAlertOptions
			{
				Title = "Confirmación",
				Text = "¿Esta seguro que quieres borrar el registro?",
				Icon = SweetAlertIcon.Question,
				ShowCancelButton = true
			});

		var confirm = string.IsNullOrEmpty(result.Value);

		if (confirm)
		{
			return;
		}

		var responseHTTP = await repository.Delete($"/api/countries/{country.Id}");

		if (responseHTTP.Error)
		{
			if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
			{
				navigationManager.NavigateTo("/");
			}
			else
			{
				var mensajeError = await responseHTTP.GetErrorMessageAsync();
				await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
			}
		}
		else
		{
			await LoadAsync();
		}
	}

	private async Task CleanFilterAsync()
	{
		Filter = string.Empty;
		await ApplyFilterAsync();
	}

	private async Task ApplyFilterAsync()
	{
		int page = 1;
		await LoadAsync(page);
		await SelectedPageAsync(page);
	}
}
